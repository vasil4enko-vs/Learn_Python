[tool.poetry]
name = "learn-python"
version = "0.1.0"
description = "Изучение Python."
authors = ["vasil4enko-vs <vvs170@gmail.com>"]
license = "CC BY 4.0"
readme = "README.md"
packages = [{ include = "learn_python" }]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.group.dev.dependencies]
bandit = "^1.7.5"
black = "^23.3.0"
ruff = "^0.0.275"
usort = "^1.0.7"
ufmt = "^2.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Enable pycodestyle (E) and Pyflakes (F) codes by default.
# Enable pycodestyle (W), mccabe (C90), isort (I), pep8-naming (N), pydocstyle (D),
# pyupgrade (UP), flake8-2020 (YTT), flake8-annotations (ANN),flake8-async (ASYNC),
# flake8-bandit (S), flake8-boolean-trap (FBT), flake8-bugbear (B), flake8-builtins (A),
# flake8-comprehensions (C4), flake8-datetimez (DTZ), flake8-future-annotations (FA),
# flake8-implicit-str-concat (ISC), flake8-import-conventions (ICN),
# flake8-no-pep420 (INP), flake8-print (T20), flake8-quotes (Q), flake8-raise (RSE),
# flake8-return (RET), flake8-slots (SLOT), flake8-simplify (SIM),
# flake8-tidy-imports (TID), flake8-type-checking (TCH), flake8-unused-arguments (ARG),
# flake8-use-pathlib (PTH), eradicate (ERA), Pylint (PL), tryceratops (TRY), flynt (FLY),
# Ruff-specific rules (RUF) rules.
select = [
    "E",
    "F",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "FBT",
    "B",
    "A",
    "C4",
    "DTZ",
    "FA",
    "ISC",
    "ICN",
    #"INP",
    "T20",
    "Q",
    "RSE",
    "RET",
    "SLOT",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PL",
    "TRY",
    "FLY",
    "RUF",
]
# ignore Checks for print statements ["T201"].
ignore = ["T201"]

[tool.ruff.pycodestyle]
# max-doc-length = 88

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"
