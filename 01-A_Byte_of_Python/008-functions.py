""" Функции """


""" Функции - это многократно используемые фрагменты программы. Они позволяют
дать имя определённому блоку команд с тем, чтобы впоследствии запускать этот
блок по указанному имени в любом месте программы и сколь угодно много раз. Это
называется вызовом функции. Мы уже использовали много встроенных функций, как
то len и range.

Функция - это, пожалуй, наиболее важный строительный блок любой нетривиальной
программы (на любом языке программирования), поэтому в этой главе мы рассмотрим
различные аспекты функций.

Функции определяются при помощи зарезервированного слова def. После этого слова
указывается имя функции, за которым следует пара скобок, в которых можно
указать имена некоторых переменных, и заключительное двоеточие в конце строки.
Далее следует блок команд, составляющих функцию. На примере можно видеть, что
на самом деле это очень просто:

Пример: (сохраните как function1.py)

"""


def say_hello():
    print('Привет, Мир!')  # блок, принадлежащий функции
# Конец функции


say_hello()  # Вызов функции
say_hello()  # ещё один вызов функции

""" Вывод: """

""" $ python function1.py
    Привет, Мир!
    Привет, Мир!

"""

""" Как это работает: """

""" Мы определили функцию с именем say_hello, используя описанный выше
    синтаксис. Эта функция не принимает параметров, поэтому в скобках не
    объявлены какие-либо переменные. Параметры функции - это некие входные
    данные, которые мы можем передать функции, чтобы получить соответствующий
    им результат.

    Обратите внимание, что мы можем вызывать одну и ту же функцию много раз, а
    значит нет необходимости писать один и тот же код снова и снова.

"""


""" Параметры функций """


""" Функции могут принимать параметры, т.е. некоторые значения, передаваемые
функции для того, чтобы она что-либо сделала с ними. Эти параметры похожи на
переменные, за исключением того, что значение этих переменных указывается при
вызове функции, и во время работы функции им уже присвоены их значения.

Параметры указываются в скобках при объявлении функции и разделяются запятыми.
Аналогично мы передаём значения, когда вызываем функцию. Обратите внимание на
терминологию: имена, указанные в объявлении функции, называются параметрами,
тогда как значения, которые вы передаёте в функцию при её вызове, -
аргументами.

Пример: (сохраните как func_param.py)

"""


def print_max(a, b):
    if a > b:
        print(a, 'максимально')
    elif a == b:
        print(a, 'равно', b)
    else:
        print(b, 'максимально')


print_max(3, 4)  # прямая передача значений

x = 5
y = 7

print_max(x, y)  # передача переменных в качестве аргументов

""" Вывод: """

""" $ python func_param.py
    4 максимально
    7 максимально

"""

""" Как это работает: """

""" Здесь мы определили функцию с именем print_max, которая использует два
    параметра с именами a и b. Мы находим наибольшее число с применением
    простого оператора if..else и выводим это число.

    При первом вызове функции print_max мы напрямую передаём числа в качестве
    аргументов. Во втором случае мы вызываем функцию с переменными в качестве
    аргументов. print_max(x, y) назначает значение аргумента x параметру a, а
    значение аргумента y - параметру b.
    В обоих случаях функция print_max работает одинаково.

"""


""" Локальные переменные """


""" При объявлении переменных внутри определения функции, они никоим образом не
связаны с другими переменными с таким же именем за пределами функции - т.е.
имена переменных являются локальными в функции. Это называется областью
видимости переменной. Область видимости всех переменных ограничена блоком, в
котором они объявлены, начиная с точки объявления имени.

Пример: (сохраните как func_local.py)

"""

x = 50
print('Глобальный x =', x)


def func(x):
    print('Всё ещё глобальный x =', x)
    x = 2
    print('Замена глобального x на локальный, теперь x =', x)


func(x)
print('По-прежнему х глобальный и равен', x)

""" Вывод: """

""" $ python func_local.py
    Глобальный x = 50
    Всё ещё глобальный x = 50
    Замена глобального x на локальный, теперь x = 2
    По-прежнему х глобальный и равен 50

"""

""" Как это работает: """

""" При первом выводе значения, присвоенного x, Python использует значение
    параметра 50, объявленного в основном блоке, выше определения функции.

    Второй вывод значения, присвоенного x выводит тоже, что и в первом выводе -
    50.

    Далее мы назначаем x значение 2. Имя x локально для нашей функции. Поэтому
    когда мы заменяем глобальное значение x в функции, x, объявленный в
    основном блоке, остаётся незатронутым. Но в текущем блоке параметр
    становится x = 2.

    Последним вызовом функции print мы выводим значение x, указанное в основном
    блоке, подтверждая таким образом, что оно не изменилось при локальном
    присваивании значения в ранее вызванной функции. Вывод - 50.

"""


""" Зарезервированное слово "global" """


""" Чтобы присвоить некоторое значение переменной, определённой на высшем
уровне программы (т.е. не в какой-либо области видимости, как то функции или
классы), необходимо указать Python, что её имя не локально, а глобально
(global). Сделаем это при помощи зарезервированного слова global. Без
применения зарезервированного слова global невозможно присвоить значение
переменной, определённой за пределами функции.

Можно использовать уже существующие значения переменных, определённых за
пределами функции (при условии, что внутри функции не было объявлено переменной
с таким же именем). Однако, это не приветствуется, и его следует избегать,
поскольку человеку, читающему текст программы, будет непонятно, где находится
объявление переменной. Использование зарезервированного слова global достаточно
ясно показывает, что переменная объявлена в самом внешнем блоке.

Пример: (сохраните как func_global.py)

"""

x = 50


def func():
    global x
    print('x = ', x)
    x = 2
    print('Заменяем глобальное значение x на локальное. Теперь x =', x)


func()
print('Глобальное значение изменилось, x =', x)

""" Вывод: """

""" x =  50
Заменяем глобальное значение x на локальное. Теперь x = 2
Глобальное значение изменилось, x = 2 """

""" Как это работает: """

""" Зарезервированное слово global используется для того, чтобы объявить, что x
- это глобальная переменная, а значит, когда мы присваиваем значение имени x
внутри функции, это изменение отразится на значении переменной x в основном
блоке программы. Используя одно зарезервированное слово global, можно объявить
сразу несколько переменных: global x, y, z. """


""" Зарезервированное слово "nonlocal" """
