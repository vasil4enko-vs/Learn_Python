""" Операторы и выражения """



""" Большинство предложений (логических строк) в программах содержат выражения.
Простой пример выражения: 2 + 3. Выражение можно разделить на операторы и
операнды.

Операторы - это некий функционал, производящий какие-либо действия, который
может быть представлен в виде символов, как например +, или специальных
зарезервированных слов. Операторы могут производить некоторые действия над
данными, и эти данные называются операндами. В нашем случае 2 и 3 - это
операнды. """


""" Операторы """


""" Кратко рассмотрим операторы и их применение:

Обратите внимание, вычислить значения выражений, данных в примерах, можно также
используя интерпретатор интерактивно. Например, для проверки выражения 2 + 3
воспользуйтесь интерактивной командной строкой интерпретатора Python: """

""" >>> 2 + 3
    5
>>> 3 * 5
    15 """

""" Операторы и их применение """

""" http://wombat.org.ua/AByteOfPython/operators_and_expressions.html#id2 """


""" Краткая запись мат. операций и присваивания """


""" Зачастую результат проведения некой математической операции необходимо
присвоить переменной, над которой эта операция производилась. Для этого
существуют краткие формы записи выражений:

Вы можете записать: """

a = 2; a = a * 3

""" в виде: """

a = 2; a *= 3

""" Обратите внимание, что выражения вида "переменная = переменная операция
выражение" принимает вид "переменная операция = выражение". """


""" Порядок вычисления """


""" Если имеется выражение вида 2 + 3 * 4, что производится раньше: сложение или
умножение? Школьный курс математики говорит нам, что умножение должно
производиться в первую очередь. Это означает, что оператор умножения имеет более
высокий приоритет, чем оператор сложения.

Следующая таблица показывает приоритет операторов в Python, начиная с самого
низкого (самое слабое связывание) и до самого высокого (самое сильное
связывание). Это означает, что в любом выражении Python сперва вычисляет
операторы и выражения, расположенные внизу таблицы, а затем операторы выше по
таблице.

Эта таблица взята из Справочника по языку Python (англ.) и приводится здесь для
полноты описания. На практике лучше использовать скобки для группировки
операторов и операндов, чтобы в явном виде указать порядок вычисления выражений.
Заодно это облегчит чтение программы. Более подробно см. в разделе Изменение
порядка вычисления ниже. """

""" Приоритет операторов """

"""
Оператор 	                  |  Описание
------------------------------|----------------------------------------------------------------
lambda 	                      |  лямбда-выражение
or 	                          |  Логическое "ИЛИ"
and 	                      |  Логическое "И"
not x 	                      |  Логическое "НЕ"
in, not in 	                  |  Проверка принадлежности
is, is not 	                  |  Проверка тождественности
<, <=, >, >=, !=, == 	      |  Сравнения
|                             |  Побитовое "ИЛИ"
^ 	                          |  Побитовое "ИСКЛЮЧИТЕЛЬНО ИЛИ"
& 	                          |  Побитовое "И"
<<, >> 	                      |  Сдвиги
+, - 	                      |  Сложение и вычитание
*, /, //, % 	              |  Умножение, деление, целочисленное деление и остаток от деления
+x, -x 	                      |  Положительное, отрицательное
~x 	                          |  Побитовое НЕ
** 	                          |  Возведение в степень
x.attribute 	              |  Ссылка на атрибут
x[индекс] 	                  |  Обращение по индексу
x[индекс1:индекс2] 	          |  Вырезка
f(аргументы ...) 	          |  Вызов функции
(выражения, ...) 	          |  Связка или кортеж [2]
[выражения, ...] 	          |  Список
{ключ:данные, ...}            |  Словарь
"""

""" Операторы, о которых мы не упомянули, будут объяснены в дальнейших главах.

В этой таблице операторы с равным приоритетом расположены в одной строке.
Например, + и - имеют равный приоритет. """


""" Изменение порядка вычисления """


""" Для облегчения чтения выражений можно использовать скобки. Например, 2 + (3
* 4) определённо легче понять, чем 2 + 3 * 4, которое требует знания приоритета
операторов. Как и всё остальное, скобки нужно использовать разумно (не
перестарайтесь) и избегать излишних, как в (2 + (3 * 4)).

Есть ещё одно преимущество в использовании скобок - они дают возможность
изменить порядок вычисления выражений. Например, если сложение необходимо
произвести прежде умножения, можно записать нечто вроде (2 + 3) * 4. """


""" Ассоциативность """


""" Операторы обычно обрабатываются слева направо. Это означает, что операторы с
равным приоритетом будут обработаны по порядку от левого до правого. Например, 2
+ 3 + 4 обрабатывается как (2 + 3) + 4. """


""" Выражения """


""" Пример (сохраните как expression.py): """

length = 5
breadth = 2

area = length * breadth
print('Площадь равна', area)
print('Периметр равен', 2 * (length + breadth))

""" Вывод: """

""" $ python expression.py
    Площадь равна 10
    Периметр равен 14 """

""" Как это работает: """

""" Длина и ширина прямоугольника хранятся в переменных length и breadth
    соответственно. Мы используем их для вычисления периметра и площади
    прямоугольника при помощи выражений. Результат выражения length * breadth
    сохраняется в переменной area, после чего выводится на экран функцией print.
    Во втором случае мы напрямую подставляем значение выражения 2 * (length +
    breadth) в функцию print.

    Также обратите внимание, как Python "красиво печатает" результат. Несмотря
    на то, что мы не указали пробела между 'Площадь равна' и переменной area,
    Python подставляет его за нас, чтобы получить красивый и понятный вывод.
    Программа же остаётся при этом легкочитаемой (поскольку нам не нужно
    заботиться о пробелах между строками, которые мы выводим). Это пример того,
    как Python облегчает жизнь программисту. """


""" Резюме """


""" Мы увидели, как пользоваться операторами, операндами и выражениями. Это
основные строительные блоки любой программы. Далее мы увидим, как это применить
на практике. """


""" Примечания """


""" [1]	"True" - англ. "Верно (Правда)"; "False" - англ. "Ошибочно (Ложь)". (прим. перев.)
    [2]	"tuple" - англ. "кортеж" (прим. перев.) """